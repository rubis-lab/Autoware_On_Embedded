<launch>
  <!-- ROS-Bridge node for simulator connection-->
  <!-- <node name="websocket_bridge" pkg="rosbridge_server" type="rosbridge_websocket" output="screen" clear_params="true" required="true" /> -->  
  <rosparam command="load" file="$(env USER_HOME)/autoware.ai/autoware_files/data/yaml/minicar_params.yaml" />
  <arg name="lidar_input_topic" default="/points_raw_origin"/>
  <arg name="lidar_output_topic" default="/points_raw"/>

  <!-- Re-publishing simulator/camera_node/image/compressed topic to /image_raw as expected by Autoware -->
  <node name="republish" type="republish" pkg="image_transport" output="screen" args="compressed in:=/simulator/camera_node/image raw out:=/image_raw"  />

  <node pkg="rubis_pkg" type="lidar_republisher" name="lidar_republisher" output="screen">
    <param name="/input_topic" value="$(arg lidar_input_topic)" />
    <param name="/output_topic" value="$(arg lidar_output_topic)" />
  </node>

  <node pkg="rubis_pkg" type="camera_republisher" name="camera_republisher" output="screen">
    <param name="/input_topic" value="$(arg image_input_topic)" />
  </node>

  <arg name="init_x" value="-8.57" />
  <arg name="init_y" value="50.94" />
  <arg name="init_z" value="-0.75" />
  <arg name="init_roll" value="0.0" />
  <arg name="init_pitch" value="0.0" />
  <arg name="init_yaw" value="-1.8" />

  <node pkg="tf" type="static_transform_publisher" name="base_link_to_velodyne" args="1.0510799 0 1.96 0 0 0 base_link velodyne 10"/>
  <!-- <node pkg="tf" type="static_transform_publisher" name="gps_to_base_link" args="0 0 0 0 0 0 gps base_link 10"/> -->
  <node pkg="tf" type="static_transform_publisher" name="lidar_to_camera" args="0.029 -0.574 -1.820 4.712 0.009 -1.883 velodyne camera 10" />

  <!-- gnss localizer -->
  <!-- <arg name="plane" default="0"/>
  <node pkg="rubis_pkg" type="gnss_localizer" name="gnss_localizer" output="screen">
    <param name="plane" value="$(arg plane)"/>
  </node> -->

  <!-- ray_ground_filter -->
  <include file="$(find points_preprocessor)/launch/ray_ground_filter.launch">
    <arg name="input_point_topic" value="/points_raw" />  <!-- input_point_topic, ground filtering will be performed over the pointcloud in this topic. -->
    <arg name="base_frame" value="base_link" />  <!-- Coordinate system to perform transform (default base_link) -->
    <arg name="max_clipping_height" value="1.5" />  <!-- Remove Points above this height value (default 2.0 meters) -->
    <arg name="min_clipping_height" value="0.0" />  <!-- Remove Points below this height value (default -0.5 meters) -->
    <arg name="min_point_distance" value="2.9" />  <!-- Removes Points closer than this distance from the sensor origin (default 1.85 meters) -->
    <arg name="radial_divider_angle" value="0.08" />  <!-- Angle of each Radial division on the XY Plane (default 0.08 degrees)-->
    <arg name="concentric_divider_distance" value="0.0" />  <!-- Distance of each concentric division on the XY Plane (default 0.0 meters) -->
    <arg name="local_max_slope" value="3" />  <!-- Max Slope of the ground between Points (default 8 degrees) -->
    <arg name="general_max_slope" value="9" />  <!-- Max Slope of the ground in the entire PointCloud, used when reclassification occurs (default 5 degrees)-->
    <arg name="min_height_threshold" value="0.4" />  <!-- Minimum height threshold between points (default 0.05 meters)-->
    <arg name="reclass_distance_threshold" value="0.01" />  <!-- Distance between points at which re classification will occur (default 0.2 meters)-->
    <arg name="no_ground_point_topic" value="/points_no_ground" />
    <arg name="ground_point_topic" value="/points_ground" />
  </include>

</launch>

