<launch>
  <rosparam command="load" file="$(env USER_HOME)/rubis_ws/src/rubis_autorunner/cfg/cubetown_autorunner/cubetown_autorunner_params.yaml" />

  <!-- cubetown -->
  <arg name="init_x" value="57.1" />
  <arg name="init_y" value="1.38" />
  <arg name="init_z" value="0.48" />
  <arg name="init_roll" value="0.0" />
  <arg name="init_pitch" value="0.0" />
  <arg name="init_yaw" value="1.57" />


  <arg name="lidar_input_topic" default="/points_raw_origin"/>
  <arg name="lidar_output_topic" default="/points_raw"/>

  <!-- Map TF Publisher -->	
	<include file="$(env USER_HOME)/autoware.ai/autoware_files/data/tf/tf.launch" />
  
  <!-- Vector Map Loader -->
	<node pkg="map_file" type="vector_map_loader" name="vector_map_loader" args="
	    $(env USER_HOME)/autoware.ai/autoware_files/vector_map/cubetown_circle/dtlane.csv 
	    $(env USER_HOME)/autoware.ai/autoware_files/vector_map/cubetown_circle/idx.csv 
	    $(env USER_HOME)/autoware.ai/autoware_files/vector_map/cubetown_circle/lane.csv 
	    $(env USER_HOME)/autoware.ai/autoware_files/vector_map/cubetown_circle/node.csv 
	    $(env USER_HOME)/autoware.ai/autoware_files/vector_map/cubetown_circle/point.csv"/>

  <!-- Point Map Loader -->
	<include file="$(find map_file)/launch/points_map_loader.launch">
    <arg name="scene_num" value="noupdate" />
    <arg name="path_pcd" value="$(env USER_HOME)/autoware.ai/autoware_files/points_map/CubeTown.pcd"/>
  </include>

  <!-- Re-publishing simulator/camera_node/image/compressed topic to /image_raw as expected by Autoware -->
  <node name="republish" type="republish" pkg="image_transport" args="compressed in:=/simulator/camera_node/image raw out:=/image_raw"  />

  <node pkg="rubis_pkg" type="lidar_republisher" name="lidar_republisher">
    <param name="/input_topic" value="$(arg lidar_input_topic)" />
    <param name="/output_topic" value="$(arg lidar_output_topic)" />
  </node>

  <node pkg="tf" type="static_transform_publisher" name="base_link_to_velodyne" args="1.2 0 2.0 0 0 0 base_link velodyne 10"/>
  <!-- <node pkg="tf" type="static_transform_publisher" name="gps_to_base_link" args="0 0 0 0 0 0 gps base_link 10"/> -->
  <node pkg="tf" type="static_transform_publisher" name="lidar_to_camera" args="0.029 -0.574 -1.820 4.712 0.009 -1.883 velodyne camera 10" />

  <include file="$(find points_downsampler)/launch/voxel_grid_filter.launch"/>

  <!-- ndt_matching --><!-- pcl_generic=0, pcl_anh=1, pcl_anh_gpu=2, pcl_openmp=3 -->
  <include file="$(find lidar_localizer)/launch/ndt_matching.launch">
    <arg name="method_type" value="0" /> 
    <arg name="get_height" value="true" /> 
  </include>

  <!-- ndt config -->
  <node pkg="rostopic" type="rostopic" name="config_ndt"
  args="pub /config/ndt autoware_config_msgs/ConfigNDT
  '{header: {seq: 8, stamp: {secs: 0, nsecs: 0}, frame_id: ''},
    init_pos_gnss: 0,
    x: $(arg init_x),
    y: $(arg init_y),
    z: $(arg init_z),
    roll: $(arg init_roll), 
    pitch: $(arg init_pitch),
    yaw: $(arg init_yaw),
    use_predict_pose: 1,
    error_threshold: 0.01,
    resolution: 3.0,
    step_size: 0.5,
    trans_epsilon: 0.01,
    max_iterations: 1}
  '"/>

<include file="$(find rubis_pkg)/launch/vel_pose_connect.launch">
  <arg name="topic_pose_stamped" value="/ndt_pose" />
  <arg name="topic_twist_stamped" value="/estimate_twist" />
</include>

</launch>

